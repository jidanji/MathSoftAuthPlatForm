//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MathRoleAuthorEntities : DbContext
    {
        public MathRoleAuthorEntities()
            : base("name=MathRoleAuthorEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AttachedMent> AttachedMents { get; set; }
        public virtual DbSet<BaseInfo> BaseInfoes { get; set; }
        public virtual DbSet<BrowserInfo> BrowserInfoes { get; set; }
        public virtual DbSet<CC> CCs { get; set; }
        public virtual DbSet<DeleteLog> DeleteLogs { get; set; }
        public virtual DbSet<Math_CWC> Math_CWC { get; set; }
        public virtual DbSet<Math_Deptinfo> Math_Deptinfo { get; set; }
        public virtual DbSet<Math_Dict> Math_Dict { get; set; }
        public virtual DbSet<Math_DictType> Math_DictType { get; set; }
        public virtual DbSet<Math_FileUpload> Math_FileUpload { get; set; }
        public virtual DbSet<Math_JYT> Math_JYT { get; set; }
        public virtual DbSet<Math_MenuInfo> Math_MenuInfo { get; set; }
        public virtual DbSet<Math_Role_Menu_Selcet> Math_Role_Menu_Selcet { get; set; }
        public virtual DbSet<Math_RoleInfo> Math_RoleInfo { get; set; }
        public virtual DbSet<Math_Status> Math_Status { get; set; }
        public virtual DbSet<Math_Student> Math_Student { get; set; }
        public virtual DbSet<Math_SYJD> Math_SYJD { get; set; }
        public virtual DbSet<Math_User_Role_Select> Math_User_Role_Select { get; set; }
        public virtual DbSet<Math_UserInfo> Math_UserInfo { get; set; }
        public virtual DbSet<Math_Work> Math_Work { get; set; }
        public virtual DbSet<Math_Work_History> Math_Work_History { get; set; }
        public virtual DbSet<Math_XSC> Math_XSC { get; set; }
        public virtual DbSet<Math_ZZ> Math_ZZ { get; set; }
        public virtual DbSet<Math_ZZTARGET> Math_ZZTARGET { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<SysSetting> SysSettings { get; set; }
        public virtual DbSet<TimeLine> TimeLines { get; set; }
        public virtual DbSet<ZhanZhangStaticNew> ZhanZhangStaticNews { get; set; }
        public virtual DbSet<ZZ_Static> ZZ_Static { get; set; }
        public virtual DbSet<Math_View_DictAndType> Math_View_DictAndType { get; set; }
        public virtual DbSet<View_AnalySISS> View_AnalySISS { get; set; }
        public virtual DbSet<View_User_Menu> View_User_Menu { get; set; }
        public virtual DbSet<View_User_Role> View_User_Role { get; set; }
        public virtual DbSet<View_ZhanZhangStatic> View_ZhanZhangStatic { get; set; }
        public virtual DbSet<View_ZhanZhangStaticBase> View_ZhanZhangStaticBase { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int resetDB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("resetDB");
        }
    }
}
