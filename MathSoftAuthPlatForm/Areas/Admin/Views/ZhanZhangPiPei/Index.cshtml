
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_BackGroud.cshtml";

    ViewBag.Id = "a10006";
}
<script src="~/Scripts/gojs/go.js"></script>
<script src="~/Scripts/gojs/GuidedDraggingTool.js"></script>
<script src="~/Scripts/gojs/RealtimeDragSelectingTool.js"></script>
<script src="~/Scripts/gojs/RotateMultipleTool.js"></script>

<style type="text/css">
    #mySavedModel {
        display: none;
    }

    #myDiagramDiv {
        background: #ffffff;
        background-size: 8px 8px;
        background-repeat: repeat;
        font-family: 'Microsoft YaHei UI';
        /*background-image: url('xxxxx/gezi.jpg');*/
        background-repeat: repeat;
    }
    /* CSS for the traditional context menu */
    #contextMenu {
        z-index: 10002;
        position: absolute;
        left: 5px;
        border: 1px solid #444;
        background-color: #F5F5F5;
        display: none;
        box-shadow: 0 0 10px rgba( 0, 0, 0, .4 );
        font-size: 12px;
        font-family: sans-serif;
        font-weight: bold;
    }

        #contextMenu ul {
            list-style: none;
            top: 0;
            left: 0;
            margin: 0;
            padding: 0;
        }

        #contextMenu li a {
            position: relative;
            min-width: 60px;
            color: #444;
            display: inline-block;
            padding: 6px;
            text-decoration: none;
            cursor: pointer;
        }

        #contextMenu li:hover {
            background: #CEDFF2;
            color: #EEE;
        }

        #contextMenu li ul li {
            display: none;
        }

            #contextMenu li ul li a {
                position: relative;
                min-width: 60px;
                padding: 6px;
                text-decoration: none;
                cursor: pointer;
            }

        #contextMenu li:hover ul li {
            display: block;
            margin-left: 0px;
            margin-top: 0px;
        }

    .el-switch {
        height: 40px;
        line-height: 40px;
    }

    .el-switch__label {
        height: 14px !important;
    }

    .el-input__inner {
        height: 32px;
    }

    #nodePro {
        position: absolute;
        right: 0;
        top: 40px;
        background: #f6f6f6;
        z-index: 200;
        padding: 20px;
        padding-left: 0;
    }

    .el-form-item {
        margin-bottom: 0;
        width: 250px;
    }

    [v-cloak] {
        display: none;
    }

    .dropdown-wrapper {
        height: 40px;
        line-height: 40px;
        min-width: 75px;
        padding-left: 0 !important;
        padding-right: 0 !important;
    }

    .el-dropdown-menu__item {
        padding: 0 12px;
    }

    .el-dropdown-menu {
        top: 35px !important;
    }

    .el-popper[x-placement^=bottom] {
        margin-top: 0;
    }

    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    ::-webkit-scrollbar-thumb {
        border-radius: 10px;
        background: #c7c6c6;
    }

    ::-webkit-scrollbar-track {
        background: #eeeeee;
    }

    #myOverviewDiv {
        position: fixed;
        height: 100px;
        width: 200px;
        border: 2px solid red;
        bottom: 0;
        right: 0;
        z-index: 1000;
        background-color: aliceblue
    }
</style>


<script id="code">
    function init() {
        if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
        var _ = go.GraphObject.make;

        myDiagram =
            _(go.Diagram, "myDiagramDiv",
            {
               // initialAutoScale: go.Diagram.Uniform,
                    // what to do when a drag-drop occurs in the Diagram's background
                    mouseDrop: function (e) { finishDrop(e, null); },
                    "commandHandler.archetypeGroupData": { isGroup: true, category: "OfNodes" },
                    "undoManager.isEnabled": true,
                    "toolManager.mouseWheelBehavior": go.ToolManager.WheelZoom,
                });

        // Overview
        myOverview =
            _(go.Overview, "myOverviewDiv",  // the HTML DIV element for the Overview
                { observed: myDiagram, contentAlignment: go.Spot.Center });   // tell it which Diagram to show and pan

        // There are two templates for Groups, "OfGroups" and "OfNodes".

        // this function is used to highlight a Group that the selection may be dropped into
        function highlightGroup(e, grp, show) {
            if (!grp) return;
            e.handled = true;
            if (show) {
                // cannot depend on the grp.diagram.selection in the case of external drag-and-drops;
                // instead depend on the DraggingTool.draggedParts or .copiedParts
                var tool = grp.diagram.toolManager.draggingTool;
                var map = tool.draggedParts || tool.copiedParts;  // this is a Map
                // now we can check to see if the Group will accept membership of the dragged Parts
                if (grp.canAddMembers(map.toKeySet())) {
                    grp.isHighlighted = true;
                    return;
                }
            }
            grp.isHighlighted = false;
        }

        // Upon a drop onto a Group, we try to add the selection as members of the Group.
        // Upon a drop onto the background, or onto a top-level Node, make selection top-level.
        // If this is OK, we're done; otherwise we cancel the operation to rollback everything.
        function finishDrop(e, grp) {
            var ok = (grp !== null
                ? grp.addMembers(grp.diagram.selection, true)
                : e.diagram.commandHandler.addTopLevelParts(e.diagram.selection, true));
            if (!ok) e.diagram.currentTool.doCancel();
        }

        myDiagram.groupTemplateMap.add("OfGroups",
            _(go.Group, "Auto",new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                {

                    background: "transparent",
                    // highlight when dragging into the Group
                    mouseDragEnter: function (e, grp, prev) { highlightGroup(e, grp, true); },
                    mouseDragLeave: function (e, grp, next) { highlightGroup(e, grp, false); },
                    computesBoundsAfterDrag: true,
                    // when the selection is dropped into a Group, add the selected Parts into that Group;
                    // if it fails, cancel the tool, rolling back any changes
                    mouseDrop: finishDrop,
                    handlesDragDropForMembers: true,  // don't need to define handlers on member Nodes and Links
                    // Groups containing Groups lay out their members horizontally

                },
                new go.Binding("background", "isHighlighted", function (h) { return h ? "rgba(255,0,0,0.2)" : "transparent"; }).ofObject(),
                _(go.Shape, "Rectangle",
                    { fill: null, stroke: "#FFDD33", strokeWidth: 2 }),
                _(go.Panel, "Vertical", { minSize: new go.Size(60, 60) },  // title above Placeholder
                    _(go.Panel, "Horizontal",  // button next to TextBlock
                        { stretch: go.GraphObject.Horizontal, background: "#FFDD33" },
                        _("SubGraphExpanderButton",
                            { alignment: go.Spot.Right, margin: 5 }),
                        _(go.TextBlock,
                            {
                                alignment: go.Spot.Left,
                                editable: true,
                                margin: 5,
                                font: "bold 18px sans-serif",
                                opacity: 0.75,
                                stroke: "#404040"
                            },
                            new go.Binding("text", "text").makeTwoWay())
                    ),  // end Horizontal Panel
                    _(go.Placeholder,
                        { padding: 5, alignment: go.Spot.TopLeft })
                )  // end Vertical Panel
            ));  // end Group and call to add to template Map

        myDiagram.groupTemplateMap.add("OfNodes",
            _(go.Group, "Auto",new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                {
                    background: "transparent",
                    ungroupable: true,
                    // highlight when dragging into the Group
                    mouseDragEnter: function (e, grp, prev) { highlightGroup(e, grp, true); },
                    mouseDragLeave: function (e, grp, next) { highlightGroup(e, grp, false); },
                    computesBoundsAfterDrag: true,
                    // when the selection is dropped into a Group, add the selected Parts into that Group;
                    // if it fails, cancel the tool, rolling back any changes
                    mouseDrop: finishDrop,

                    handlesDragDropForMembers: true,  // don't need to define handlers on member Nodes and Links
                    // Groups containing Nodes lay out their members vertically

                },
                new go.Binding("background", "isHighlighted", function (h) { return h ? "rgba(255,0,0,0.2)" : "transparent"; }).ofObject(),
                _(go.Shape, "Rectangle",
                    { fill: null, stroke: "#33D3E5", strokeWidth: 2 }),
                _(go.Panel, "Vertical", { minSize: new go.Size(60, 60) }, // title above Placeholder
                    _(go.Panel, "Horizontal",  // button next to TextBlock
                        { stretch: go.GraphObject.Horizontal, background: "#33D3E5" },
                        _("SubGraphExpanderButton",
                            { alignment: go.Spot.Right, margin: 5 }),
                        _(go.TextBlock,
                            {
                                alignment: go.Spot.Left,
                                editable: true,
                                margin: 5,
                                font: "bold 16px sans-serif",
                                opacity: 0.75,
                                stroke: "#404040"
                            },
                            new go.Binding("text", "text").makeTwoWay())
                    ),  // end Horizontal Panel
                    _(go.Placeholder,
                        { padding: 5, alignment: go.Spot.TopLeft })
                )  // end Vertical Panel
            ));  // end Group and call to add to template Map

        myDiagram.nodeTemplate =
            _(go.Node, "Auto",new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                { // dropping on a Node is the same as dropping on its containing Group, even if it's top-level
                    mouseDrop: function (e, nod) { finishDrop(e, nod.containingGroup); }
                },
                _(go.Shape, "Rectangle",
                    { fill: "#ACE600", stroke: null },
                    new go.Binding("fill", "color")),
                _(go.TextBlock,
                    {
                        margin: 5,
                        editable: true,
                        font: "bold 13px sans-serif",
                        opacity: 0.75,
                        stroke: "#404040"
                    },
                    new go.Binding("text", "text").makeTwoWay())
            );





        load();
    }

    function expandGroups(g, i, level) {
        if (!(g instanceof go.Group)) return;
        g.isSubGraphExpanded = i < level;
        g.memberParts.each(function (m) {
            expandGroups(m, i + 1, level);
        })
    }
    function reexpand(e) {
        myDiagram.startTransaction("reexpand");
        var level = parseInt(document.getElementById("levelSlider").value);
        myDiagram.findTopLevelGroups().each(function (g) { expandGroups(g, 0, level); })
        myDiagram.commitTransaction("reexpand");
    }

    // save a model to and load a model from JSON text, displayed below the Diagram
    function save() {
        document.getElementById("mySavedModel").value = myDiagram.model.toJson();
        myDiagram.isModified = false;
    }
    function load() {
        $("#modelLoad").modal();
        $.ajax({
            url: "GetData?r=" + Math.random(),
            data: { draw: -1, start: -1, length: -1 },
            success: function (data) {
                myDiagram.model = go.Model.fromJson(data);

                $("#modelLoad").modal("hide");
            }
        })

    }

    window.onload = function () {
        $('#myDiagramDiv').height($(window).height()-100)
        init();
    }

    $(document).ready(function () {
        $("#bs").click(function () {
            $("#modelLoad").modal();
            var flowstr = myDiagram.model.toJSON();
            var myObject = eval('(' + flowstr + ")");

            delete myObject["class"]
            delete myObject["linkDataArray"]
            flowstr = JSON.stringify(myObject);

            $.ajax({
                url: "SaveData?r=" + Math.random(),
                type: "POST",
                data: { flowstr: flowstr },
                success: function (data) {
                    $("#modelLoad").modal('hide');
                }
            })
        })
    })
</script>

<div class="modal fade " aria-hidden="true" data-backdrop="static" id="modelLoad" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-body">
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">  <i class="glyphicon glyphicon-remove-circle"></i></button>

                <form>

                    <div class="form-group form-group-sm">
                        <h5 class="pro-title">正在处理数据，请耐心等待......</h5>
                        <div class="progress pro-radius">
                            <div class="progress-bar progress-bar-striped gradient load_bar" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100">

                            </div>
                        </div>

                    </div>



                </form>
            </div>

        </div>
    </div>
</div>

<div id="myOverviewDiv"></div>

<button id="bs" class="btn btn-primary btn-sm">保存</button>
<div style="display:flex;">


    <div id="myDiagramDiv" style="flex-grow: 1; height: 500px; border: solid 1px black;height:500px;"></div>

</div>
<textarea id="mySavedModel" style="width:100%;height:300px">{
  "nodeDataArray": [
{"key":1, "text":"石家庄", "isGroup":true, "category":"OfGroups"},
{"key":2, "text":"衡水", "isGroup":true, "category":"OfGroups"},
{"key":3, "text":"枣强", "isGroup":true, "category":"OfNodes", "group":2},
{"key":4, "text":"沧州", "isGroup":true, "category":"OfNodes", "group":2},
{"key":5, "text":"武强", "isGroup":true, "category":"OfNodes", "group":2},
{"key":6, "text":"武义", "isGroup":true, "category":"OfNodes", "group":2},
{"text":"河北枣强中学","isGroup":false, "group":3, "key":-7,"category":""},
{"text":"古城指教中信","isGroup":false, "group":3, "key":-8,"category":""},
{"text":"河北枣强农业中学","isGroup":false, "group":4, "key":-9,"category":""}
 ]}
  </textarea>
